#!/usr/bin/env python3

"""
Battlecode 2020 Game runner tool

Usage: ./bc20run -r redteam -b blueteam
For help and more options, use './bc20run --help'

You will need to have Python and Git installed
"""


from argparse import ArgumentParser
import sys, os, subprocess

DIST_REPO   = 'https://github.com/battlecode/battlecode20-dist'
DIR_CWD     = os.path.dirname(os.path.abspath(__file__))
DIR_DIST    = os.path.join(DIR_CWD, 'dist')
DIR_CLASSES = os.path.join(DIR_CWD, 'build')
ENGINE      = os.path.join(DIR_DIST, 'engine.jar')


def update_distribution():
    """
    Updates the local distribution by pulling from the git repository,
    or clones it if it does not exist.
    """

    command = ['false']
    cwd = DIR_CWD

    if os.path.isdir(DIR_DIST):
        print('updating')
        command = ['git', 'pull', '"ext::ssh -i ../.ssh/id_rsa git@github.com %%S battlecode/battlecode20-dist"']
        cwd = DIR_DIST
    else:
        print('cloning')
        command = ['git', 'clone', '"ext::ssh -i .ssh/id_rsa git@github.com %%S battlecode/battlecode20-dist"', DIR_DIST]
        cwd = DIR_CWD

    subproc = subprocess.Popen(command, cwd=cwd)
    subproc.wait()
    if subproc.returncode != 0:
        sys.stderr.write('An error occurred updating your Battlecode distribution.\n')
        sys.stderr.write('Do you have git installed?\n')
        sys.exit(1)

def run_game(red, blue, replay, mapfiles, seed):
    """
    Executes the game with the given parameters.
    """

    # TODO Check this command for sanity
    command = ['java', '-jar', ENGINE,
        '-Dbc.server.mode=headless',
        '-Dbc.server.map-path=maps',
        '-Dbc.server.debug=true',
        '-Dbc.engine.debug-methods=true',
        '-Dbc.game.team-a='+red,
        '-Dbc.game.team-b='+blue,
        '-Dbc.game.team-a.url='+DIR_CLASSES,
        '-Dbc.game.team-b.url='+DIR_CLASSES,
        '-Dbc.server.savefile='+replay]
    if mapfiles != None:
        # Use the custom map files
        command += ['-Dbc.game.maps='+mapfiles]
    else:
        # TODO Use the seed
        pass

    proc = subprocess.Popen(command)
    proc.wait()
    print ('Game execution finished with exit code {}.'.format(proc.returncode))
    if proc.returncode == 0:
        print ('Replay file saved at '+replay)


if __name__ == '__main__':
    parser = ArgumentParser(description='Run a game locally and save a replay file.')
    parser.add_argument('-r', '--red', dest='red', type=str, default='examplefuncsplayer',
                        help='the directory containing your code for the red player')
    parser.add_argument('-b', '--blue', dest='blue', type=str, default='examplefuncsplayer',
                        help='the directory containing your code for the blue player')
    parser.add_argument('-o', '--replay', dest='replay', type=str, default='replay.bc20',
                        help='the name of the replay file to save to')
    parser.add_argument('-m', '--maps', dest='mapfiles', type=str,
                        help='a comma-separated list of maps to run on')
    parser.add_argument('-s', '--seed', dest='seed', type=int, default=0,
                        help='a random seed to use to generate a map')

    args = vars(parser.parse_args())

    print ('Updating distribution...')
    sys.stdout.flush()
    update_distribution()

    print ('Running game...')
    sys.stdout.flush()
    #run_game(**args)
